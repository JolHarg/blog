<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Posts tagged with internet: JolHarg: Software and Technology Blog</title><id>https://blog.jolharg.com/atom.xml</id><updated>2021-10-08 16:37:31 UTC</updated><link href="https://blog.jolharg.com/tag/internet"/><entry><id>facebook-being-down-killed-adguard</id><title type="text">Facebook being down killed AdGuard</title><updated>2021-10-08 16:37:31 UTC</updated><author><name>Dan Dart</name></author><content type="html">&lt;p&gt;Tbh Facebook being down the other day did have one knock-on effect for me who doesn’t use it.&lt;/p&gt;
&lt;p&gt;Adguard DNS got quite a pummeling from folks trying to access Facebook and their entire DNS effectively got DDoSed, leaving nothing getting resolved for a good while.&lt;/p&gt;
&lt;p&gt;Meanwhile I over here killed my own internet by disabling DNS on my router for days thinking it would revert to default. Was very confusing as I had adguard hardcoded on my PC as well, but not my phone.&lt;/p&gt;
&lt;p&gt;My week went like this:&lt;/p&gt;
&lt;p&gt;My phone: "No internet".&lt;/p&gt;
&lt;p&gt;Me on my PC: "Huh? But it’s working! See?"&lt;/p&gt;</content><link href="https://blog.jolharg.com/post/2021/10/facebook-being-down-killed-adguard"/></entry><entry><id>retro-dial-up-network-fun</id><title type="text">Retro dial-up network fun</title><updated>2018-07-27 00:46:00 UTC</updated><author><name>Dan Dart</name></author><content type="html">&lt;p&gt;I remember those days when your computer hissed and made strange noises in order to connect to the Internet. Today, most of us look back at those days in disdain. But for some, we want to repeat the same kind of experiences that we used to, just for the pure nostalgia of it. Some of the most remembered operating systems can take us back to those days.&lt;/p&gt;
&lt;p&gt;Windows for Workgroups 3.11 is remembered for its Terminal application and ability to use a multitude of networking technologies to connect to networks back in the day.&lt;/p&gt;
&lt;p&gt;DOS also had limited support for networks - but this required third party software, unless one would talk directly to "COM1" as it would name the serial device.&lt;/p&gt;
&lt;p&gt;Windows 98, although it has proper TCP/IP and Ethernet card support built in and there's therefore no need to use serial for internet when virtualising, for the most part it is remembered for its dial-up connections, since when we were using it, no one had broadband yet. But one of the best things about Windows 98 and serial is HyperTerminal! One can now connect to SynchroNet or other telnet services from Windows 98, just using HyperTerminal like dialling a phone, and possibly other things even with TLS, using socat. If you have a Windows 98 computer without ethernet, and a serial port between your host and Windows 98 computer, you can also connect to the Internet via this setup, by modifying the setup instructions to use a real serial port.&lt;/p&gt;
&lt;p&gt;I'm not including instructions to emulate a "Lucent" win-modem because as far as I can see, qemu doesn't support these.&lt;/p&gt;
&lt;p&gt;Although this isn't needed for dial up internet connection sharing, one can emulate a terminal with a SLIP interface too.&lt;/p&gt;
&lt;p&gt;I'm going to explain how to pretend to be your own ISP, to old versions of Windows, and make HyperTerminal available for telnet fun, all via a virtual serial port.&lt;/p&gt;
&lt;p&gt;To set this serial emulation up, I tried doing this through the VICE RS232 mode of tcpser, but it ultimately came up short. My VMs could use it just fine for telnetting places, but wouldn't go through pppd properly if I just socatted from its port to a pty, and made pppd listen on that pty. I think there was a protocol problem somewhere there, plus pppd kept hanging when I tried to make it listen on a TCP port - this is probably because it was trying to connect - but it is OK with a serial port. But this won't work with any old pty, it has to "look" like a serial port as well, and you can't just redirect physical serial ports using socat as if they were a file either.&lt;/p&gt;
&lt;p&gt;The secret ingredient is to install a virtual serial port - its module is called tty0tty and it can be found here: &lt;a href="https://github.com/freemed/tty0tty" class="uri"&gt;https://github.com/freemed/tty0tty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installation (check the page for up to date instructions) you have access to 4 virtual serial port loops:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/dev/tnt0 &amp;lt;=&amp;gt; /dev/tnt1
/dev/tnt2 &amp;lt;=&amp;gt; /dev/tnt3
/dev/tnt4 &amp;lt;=&amp;gt; /dev/tnt5
/dev/tnt6 &amp;lt;=&amp;gt; /dev/tnt7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For use as a normal user, these should be chmod'd to 666:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chmod 666 /dev/tnt\*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything sent to either end will be echoed on the other end, and this will act like a proper serial port, plugged in one end and the other end. For more information on this, see their GitHub repo.&lt;/p&gt;
&lt;p&gt;Once this is set up, we can start the virtual machine. First, run qemu using the virtual serial line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qemu-system-i386 win98.img -serial /dev/tnt0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Connect the other end to tcpser, which will emulate the phone line and allow you to dial a TCP connection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcpser -tsSiI -i &amp;#39;s0=1&amp;amp;k3&amp;#39; -s 57600 -S 57600 -l5 -d /dev/tnt1 -n 1=127.0.0.1:2323 -n 2=synchro.net -n 3=
localhost:23 -n 08450880101=localhost:2323 -n 08458457444=127.0.0.1:2323 -n &amp;quot;0845 845 7444&amp;quot;=127.0.0.1:2323 -n 0018002169575=127.
0.0.1:2323 -n 0018005433279=127.0.0.1:2323 -n 08450801000=127.0.0.1:2323&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explanation: Log everything. Set pickup to 1 ring. Set speed to 56k. Use the other end of the first serial line. Add a few example phone numbers (-n number=IP:port), (these I've used for ISP detection in Windows 98).&lt;/p&gt;
&lt;p&gt;Listen to that TCP connection with socat and redirect it to a second virtual serial line loopback. I don't want it to die so I'll put it in a while true.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while true; do socat -s -d -d tcp-listen:2323 /dev/tnt2; done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to pretend to be our own ISP, we need to run pppd on the other end of that serial line. I couldn't use IP directly, this needs a serial line, and tcpser couldn't use a second interface, so we need to use socat. The IPs I'm using are within my current network. The rest of the settings are to disable authentication (for now, as I couldn't get it to work, which needs root), not fork the process so we can debug, not die if there's no call, show the debug logs, not communicate via serial (just IP), allow the connection to be seen by the LAN, adjust the forwarding parameters of the kernel appropriately and set a default DNS server of Quad9.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pppd /dev/tnt3 57600 192.168.1.100:192.168.1.101 asyncmap 0 netmask 255.255.255.0 noauth silent nodetach passive persist debug local proxyarp ktune
 ms-dns 9.9.9.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you'd like to define your own DNS mappings from your /etc/hosts, such as pretending to be the server for updates and ISP information (if you host a web server locally), add the appropriate lines to your /etc/hosts like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.1.100   ispreferral.microsoft.com www.update.microsoft.com v4.windowsupdate.microsoft.com windowsupdate.microsoft.com ww
w.msn.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change &lt;code&gt;ms-dns 9.9.9.9&lt;/code&gt; to &lt;code&gt;ms-dns 192.168.1.100&lt;/code&gt; in the &lt;code&gt;pppd&lt;/code&gt; command, then run dnsmasq:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnsmasq -zdippp0 -2ppp0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The -z specifies only binding to ppp0 (to not interfere with other services running on port 53/udp, such as systemd-resolved), -d to not daemonise, -i ppp0 to specify the interface and -2 ppp0 to specify only DNS, not DHCP.&lt;/p&gt;
&lt;p&gt;In any case, do the usual NAT stuff:&lt;/p&gt;
&lt;p&gt;Allow IP forwarding...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 1 | sudo tee  /proc/sys/net/ipv4/ip\_forward&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And allow forwarding and masquerading in the firewall (replace wlp7s0 with your main interface)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo iptables -t nat -A POSTROUTING -o wlp7s0 -j MASQUERADE

sudo iptables -A FORWARD -i wlp7s0 -o ppp0 -m state --state RELATED,ESTABLISHED -j ACCEPT

sudo iptables -A FORWARD -i ppp0 -o wlp7s0 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Hooray! Connecting to phone number 1 will give us a "dial up" connection through our virtual serial line! 2 will give us a line to synchro.net for use in the Terminal or HyperTerminal application, 3 will telnet to our local system if we need that for any reason and 08450880101 is the default Windows 98 "find my ISPs" service, which I've also redirected to our "ISP" connection for good measure.&lt;/p&gt;
&lt;p&gt;Coming next time: Can we emulate update servers and ISP information servers? Given Windows 98 only supports 128-bit SSL / TLS 1.0, I think it's time to break SSL.&lt;/p&gt;</content><link href="https://blog.jolharg.com/post/2018/07/retro-dial-up-network-fun"/></entry><entry><id>how-to-use-ssh-for-internet-connection</id><title type="text">How to use SSH for an Internet Connection Sharing Proxy</title><updated>2010-11-13 13:10:00 UTC</updated><author><name>Dan Dart</name></author><content type="html">&lt;p&gt;I haven't made a blog in a long while, so I'd thought I'd share this, which I recently discovered how to do.&lt;/p&gt;
&lt;p&gt;If you find the idea of proxies a bit restrictive. because after all, they have to be set up in the applications in question, and may not work for some applications, help is here. And all you need is an SSH server you can connect to. Sadly, this method requires root, but it's worth having for the system-wide Internet connection you'll get from it.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="authenticating-as-root"&gt;Authenticating as root&lt;/h2&gt;
&lt;p&gt;First, make sure you're root on the client machine (sudo -s or su -, depending on your distro), and that you can ssh as root to your target server. This is of course causes security implications, so it may be a good idea to generate a key pair for root-to-root access and block off passworded access for root, so that no one can bruteforce your root password.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generate the key pair as root on the client:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client:~# ssh-keygen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And copy the key to the server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client:~# ssh-copy-id [server]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Test the root login. It should not prompt you for password authentication (unless you've set one in ssh-keygen). Now, to block off password logins, edit /etc/ssh/sshd_config (or /etc/sshd/sshd_config) on the server and make sure this line is present:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PermitRootLogin without-password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hooray! We're now somewhat more secure!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="creating-the-tunnel"&gt;Creating the tunnel&lt;/h2&gt;
&lt;p&gt;Now to start a tunnel. The -w switch on ssh will do what we need, and create a tunnel network interface on both computers. The first number is the number of the interface on the client, and the second is for the server. For example, 0:! will create tun0 on the client connected to tun1 on the server. You may specify auto for the next available one. Let's create tunnels called tun0 to make it simpler.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client:~# ssh -w0:0 [server]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, see if your tunnels were set up correctly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server:~# ifconfig -a tun0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should see a tun0 interface. This is a layer 3 tunneled virtual interface (point-to-point).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set up an IP on both sides so each computer can talk to each other.&lt;/strong&gt; &lt;code&gt;server:~# ifconfig tun0 10.0.0.1 pointopoint 10.0.0.2 client:~# ifconfig tun0 10.0.0.2 pointopoint 10.0.0.1&lt;/code&gt;&lt;strong&gt; Try pinging each side to see if you have a connection.&lt;/strong&gt; Once each host can talk to the other, we can set up the routing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="setting-up-the-routing"&gt;Setting up the routing&lt;/h2&gt;
&lt;h3 id="server-setup"&gt;Server setup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ensure that the tun0 interface is not restricted:&lt;/strong&gt; &lt;code&gt;server:~# iptables -A INPUT -i tun0 -j ACCEPT server:~# iptables -A OUTPUT -o tun0 -j ACCEPT server:~# iptables -A FORWARD -i tun0 -j ACCEPT&lt;/code&gt; &lt;strong&gt;Allow packets in from the external interface to be processed by the tunnel:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server:~# iptables -A INPUT -i eth0 -d 10.0.0.2 -j ACCEPT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Allow forwarded packets to be routed to their destination:&lt;/strong&gt; &lt;code&gt;server:~# iptables -A FORWARD -i eth0 -o tun0 -j ACCEPT&lt;/code&gt; &lt;strong&gt; Set up tun0 for NAT:&lt;/strong&gt; &lt;code&gt;server:~# iptables -A POSTROUTING -o tun0 -t nat -j MASQUERADE&lt;/code&gt; &lt;strong&gt; Enable IP forwarding in the kernel:&lt;/strong&gt; &lt;code&gt;server:~# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="section"&gt;&lt;/h3&gt;
&lt;h3 id="client-setup"&gt;Client setup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Allow packets to be processed from the tun0 interface:&lt;/strong&gt; &lt;code&gt;client:~# iptables -A INPUT -i tun0 -j ACCEPT client:~# iptables -A OUTPUT -o tun0 -j ACCEPT client:~# iptables -A FORWARD -i tun0 -j ACCEPT&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="section-1"&gt;&lt;/h4&gt;
&lt;h4 id="setting-up-the-gateways"&gt;Setting up the gateways&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Find the existing default gateway:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client:~# route | grep ^default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add a backbone to stop the server not being found once we switch gateways:&lt;/strong&gt; &lt;code&gt;client:~# route add [server IP] gw [existing default gateway]&lt;/code&gt; &lt;strong&gt; Add the new default gateway:&lt;/strong&gt; &lt;code&gt;client:~# route add default gw 10.0.0.1&lt;/code&gt; &lt;strong&gt; Remove the existing default gateway (Be very careful!):&lt;/strong&gt; &lt;code&gt;client:~# route del default gw [existing default gateway]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="section-2"&gt;&lt;/h3&gt;
&lt;h3 id="testing-the-tunnel"&gt;Testing the tunnel&lt;/h3&gt;
&lt;p&gt;Try going to whatismyip.com in your browser. It should show you the IP of your server. If you're curious, you can also check the default route to somewhere like Google by using the traceroute utility.&lt;/p&gt;
&lt;p&gt;You're done!&lt;/p&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;I can't see a tun0 interface!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make sure you're root on both sides. (It sounds obvious - I've thumped my head on my desk so much because of this!)&lt;/p&gt;
&lt;p&gt;Start ssh with the -v switch to show more verbosity. If you see a message a bit like this:&lt;/p&gt;
&lt;p&gt;debug1: Remote: Failed to open the tunnel device. channel 0: open failed: administratively prohibited: open failed&lt;/p&gt;
&lt;p&gt;it could mean that someone else is trying to create a tunnel with the same interface name on the server.&lt;/p&gt;
&lt;p&gt;If you see something a little like this:&lt;/p&gt;
&lt;p&gt;debug1: sys_tun_open: failed to configure tunnel (mode 1): Device or resource busy&lt;/p&gt;
&lt;p&gt;it might mean that you already have a tunnel with that interface name open. Check "ifconfig -a".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;I get the message "ping: sendmsg: Operation not permitted" when testing the tunnel connection!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You didn't allow traffic to flow between the tunnel and local network device. Try turning the client firewall off.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;The connection is slow!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There will be significant overhead as all the traffic is encapsulated into SSH and encrypted. You will also see latencies go up as traffic needs to travel from your client to your server and back additionally.&lt;/p&gt;</content><link href="https://blog.jolharg.com/post/2010/11/how-to-use-ssh-for-internet-connection"/></entry><entry><id>xenon-project-looking-for-helpers</id><title type="text">Xenon Project looking for helpers!</title><updated>2009-10-14 14:17:00 UTC</updated><author><name>Dan Dart</name></author><content type="html">&lt;p&gt;I started a project some time ago, which is for now called "Codename: Project Xenon".&lt;/p&gt;
&lt;p&gt;Xenon is a browser-based GUI designed to be implemented on netbooks. The difference between other netbook OSes and cloud systems is that not only can you test it online, it will also be installed on netbooks - which will update from the Web automatically, giving you updates, and ability to use it without being connected to the Internet due to a local web server instance.&lt;/p&gt;
&lt;p&gt;It will have a very small footprint - being built on very few programs, and so will run on very low-end systems, so it will bring life to your old computers as well.&lt;/p&gt;
&lt;p&gt;We are now looking for helpers to make this project a reality. If you are a designer or a programmer who can program using any combination of (X)HTML, CSS, JavaScript, PHP or MySQL, then we would like you to help us out. We are afraid pay is out of the question at the moment, until we start selling subscriptions to the web service, the budget is zero.&lt;/p&gt;
&lt;p&gt;If you have any ideas to help the project along, then please give us feedback!&lt;/p&gt;
&lt;p&gt;To apply, simply email: &lt;a href="mailto:dan.dart@googlemail.com"&gt;dan.dart@googlemail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To visit the main website of the project, click here: &lt;a href="https://web.archive.org/web/20100107134808/http://xenon.kevinghadyani.com/" class="uri"&gt;https://web.archive.org/web/20100107134808/http://xenon.kevinghadyani.com/&lt;/a&gt; (edit 2021: archived) To try out the web based desktop for yourself, click here: &lt;a href="https://web.archive.org/web/20100224082039/https://xenon.kevinghadyani.com/desktop"&gt;Try The Desktop&lt;/a&gt; (edit 2021: archived partially). Please note that it is nowhere near finished at the moment. To view the SDK and programming procedures to help you, click here: Xenon SDK at xenon.kevinghadyani.com/wiki/index.php/Developing_Apps (edit 2021: not archived)&lt;/p&gt;
&lt;p&gt;Thank you, and have a good day!&lt;/p&gt;</content><link href="https://blog.jolharg.com/post/2009/10/xenon-project-looking-for-helpers"/></entry></feed>